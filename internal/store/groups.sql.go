// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: groups.sql

package store

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (group_name, description)
VALUES ($1, $2)
RETURNING description, group_name, group_id, is_active, created_at, updated_at
`

type CreateGroupParams struct {
	GroupName   string         `json:"group_name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.GroupName, arg.Description)
	var i Group
	err := row.Scan(
		&i.Description,
		&i.GroupName,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroupById = `-- name: DeleteGroupById :exec
UPDATE groups
SET is_active = False
WHERE group_id = $1
`

func (q *Queries) DeleteGroupById(ctx context.Context, groupID int64) error {
	_, err := q.db.Exec(ctx, deleteGroupById, groupID)
	return err
}

const getGroupByGroupId = `-- name: GetGroupByGroupId :one
SELECT description, group_name, group_id, is_active, created_at, updated_at
FROM groups
WHERE group_id = $1
`

func (q *Queries) GetGroupByGroupId(ctx context.Context, groupID int64) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByGroupId, groupID)
	var i Group
	err := row.Scan(
		&i.Description,
		&i.GroupName,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteUserById = `-- name: HardDeleteUserById :exec
DELETE FROM groups WHERE group_id = $1
`

func (q *Queries) HardDeleteUserById(ctx context.Context, groupID int64) error {
	_, err := q.db.Exec(ctx, hardDeleteUserById, groupID)
	return err
}
