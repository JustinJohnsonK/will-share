// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package store

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name, phone_number)
VALUES ($1, $2)
RETURNING user_id, user_name, phone_number
`

type CreateUserParams struct {
	UserName    string         `json:"user_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

type CreateUserRow struct {
	UserID      int64          `json:"user_id"`
	UserName    string         `json:"user_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.UserName, arg.PhoneNumber)
	var i CreateUserRow
	err := row.Scan(&i.UserID, &i.UserName, &i.PhoneNumber)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_active = False
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, user_name, phone_number
FROM users
WHERE user_id = $1
AND is_active = True
`

type GetUserByIdRow struct {
	UserID      int64          `json:"user_id"`
	UserName    string         `json:"user_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) GetUserById(ctx context.Context, userID int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(&i.UserID, &i.UserName, &i.PhoneNumber)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users 
WHERE user_id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, userID)
	return err
}
