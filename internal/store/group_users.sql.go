// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: group_users.sql

package store

import (
	"context"
)

const addUserToGroup = `-- name: AddUserToGroup :one
INSERT INTO group_users (group_id, user_id)
VALUES ($1, $2)
RETURNING group_id, user_id
`

type AddUserToGroupParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

type AddUserToGroupRow struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) (AddUserToGroupRow, error) {
	row := q.db.QueryRow(ctx, addUserToGroup, arg.GroupID, arg.UserID)
	var i AddUserToGroupRow
	err := row.Scan(&i.GroupID, &i.UserID)
	return i, err
}

const addUsersToGroup = `-- name: AddUsersToGroup :many
INSERT INTO group_users (group_id, user_id)
SELECT $1, unnest($2::bigint[]) AS user_id
RETURNING group_id, user_id
`

type AddUsersToGroupParams struct {
	GroupID int64   `json:"group_id"`
	UserID  []int64 `json:"user_id"`
}

type AddUsersToGroupRow struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) AddUsersToGroup(ctx context.Context, arg AddUsersToGroupParams) ([]AddUsersToGroupRow, error) {
	rows, err := q.db.Query(ctx, addUsersToGroup, arg.GroupID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddUsersToGroupRow
	for rows.Next() {
		var i AddUsersToGroupRow
		if err := rows.Scan(&i.GroupID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupUserIds = `-- name: GetGroupUserIds :many
SELECT user_id
FROM group_users
WHERE group_id = $1
AND is_active = True
`

func (q *Queries) GetGroupUserIds(ctx context.Context, groupID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getGroupUserIds, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var user_id int64
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupUsersByGroupId = `-- name: GetGroupUsersByGroupId :many
SELECT group_users.user_id, users.user_name
FROM group_users
INNER JOIN users on users.user_id = group_users.user_id
WHERE group_users.group_id = $1
AND users.is_active = True
`

type GetGroupUsersByGroupIdRow struct {
	UserID   int64  `json:"user_id"`
	UserName string `json:"user_name"`
}

func (q *Queries) GetGroupUsersByGroupId(ctx context.Context, groupID int64) ([]GetGroupUsersByGroupIdRow, error) {
	rows, err := q.db.Query(ctx, getGroupUsersByGroupId, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupUsersByGroupIdRow
	for rows.Next() {
		var i GetGroupUsersByGroupIdRow
		if err := rows.Scan(&i.UserID, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hardRemoveUserFromGroup = `-- name: HardRemoveUserFromGroup :exec
DELETE FROM group_users 
WHERE user_id = $1
AND group_id = $2
`

type HardRemoveUserFromGroupParams struct {
	UserID  int64 `json:"user_id"`
	GroupID int64 `json:"group_id"`
}

func (q *Queries) HardRemoveUserFromGroup(ctx context.Context, arg HardRemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, hardRemoveUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
UPDATE group_users
SET is_active = False
WHERE user_id = $1
AND group_id = $2
`

type RemoveUserFromGroupParams struct {
	UserID  int64 `json:"user_id"`
	GroupID int64 `json:"group_id"`
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeUserFromGroup, arg.UserID, arg.GroupID)
	return err
}
