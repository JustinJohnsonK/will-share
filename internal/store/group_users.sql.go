// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: group_users.sql

package store

import (
	"context"
)

const addUserToGroup = `-- name: AddUserToGroup :one
INSERT INTO group_users (group_id, user_id)
VALUES ($1, $2)
RETURNING id, group_id, user_id, is_active, created_at, updated_at
`

type AddUserToGroupParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) (GroupUser, error) {
	row := q.db.QueryRow(ctx, addUserToGroup, arg.GroupID, arg.UserID)
	var i GroupUser
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardRemoveUserFromGroup = `-- name: HardRemoveUserFromGroup :exec
DELETE FROM group_users 
WHERE user_id = $1
AND group_id = $2
`

type HardRemoveUserFromGroupParams struct {
	UserID  int64 `json:"user_id"`
	GroupID int64 `json:"group_id"`
}

func (q *Queries) HardRemoveUserFromGroup(ctx context.Context, arg HardRemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, hardRemoveUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
UPDATE group_users
SET is_active = False
WHERE user_id = $1
AND group_id = $2
`

type RemoveUserFromGroupParams struct {
	UserID  int64 `json:"user_id"`
	GroupID int64 `json:"group_id"`
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeUserFromGroup, arg.UserID, arg.GroupID)
	return err
}
