// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: bill_users.sql

package store

import (
	"context"
)

const addUserBill = `-- name: AddUserBill :one
INSERT INTO user_bills (bill_id, group_id, lend_user_id, borrow_user_id, amount)
VALUES ($1, $2, $3, $4, $5)
RETURNING bill_id, group_id, lend_user_id, borrow_user_id, amount
`

type AddUserBillParams struct {
	BillID       int64 `json:"bill_id"`
	GroupID      int64 `json:"group_id"`
	LendUserID   int64 `json:"lend_user_id"`
	BorrowUserID int64 `json:"borrow_user_id"`
	Amount       int32 `json:"amount"`
}

type AddUserBillRow struct {
	BillID       int64 `json:"bill_id"`
	GroupID      int64 `json:"group_id"`
	LendUserID   int64 `json:"lend_user_id"`
	BorrowUserID int64 `json:"borrow_user_id"`
	Amount       int32 `json:"amount"`
}

func (q *Queries) AddUserBill(ctx context.Context, arg AddUserBillParams) (AddUserBillRow, error) {
	row := q.db.QueryRow(ctx, addUserBill,
		arg.BillID,
		arg.GroupID,
		arg.LendUserID,
		arg.BorrowUserID,
		arg.Amount,
	)
	var i AddUserBillRow
	err := row.Scan(
		&i.BillID,
		&i.GroupID,
		&i.LendUserID,
		&i.BorrowUserID,
		&i.Amount,
	)
	return i, err
}

const getBorrowingsByUserId = `-- name: GetBorrowingsByUserId :many
SELECT lend_user_id, sum(amount) as amount
FROM user_bills
WHERE borrow_user_id = $1
AND is_active = True
GROUP BY lend_user_id
`

type GetBorrowingsByUserIdRow struct {
	LendUserID int64 `json:"lend_user_id"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) GetBorrowingsByUserId(ctx context.Context, borrowUserID int64) ([]GetBorrowingsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getBorrowingsByUserId, borrowUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBorrowingsByUserIdRow
	for rows.Next() {
		var i GetBorrowingsByUserIdRow
		if err := rows.Scan(&i.LendUserID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupStatusByGroupId = `-- name: GetGroupStatusByGroupId :many
SELECT user_bills.lend_user_id, u1.user_name as lend_user_name, user_bills.borrow_user_id, u2.user_name as borrow_user_name, sum(user_bills.amount) as amount
FROM user_bills
INNER JOIN users as u1 on u1.user_id = lend_user_id
INNER JOIN users as u2 on u2.user_id = borrow_user_id
WHERE user_bills.group_id = $1
AND user_bills.is_active = True
GROUP BY u1.user_name,
u2.user_name,
user_bills.lend_user_id,
user_bills.borrow_user_id
`

type GetGroupStatusByGroupIdRow struct {
	LendUserID     int64  `json:"lend_user_id"`
	LendUserName   string `json:"lend_user_name"`
	BorrowUserID   int64  `json:"borrow_user_id"`
	BorrowUserName string `json:"borrow_user_name"`
	Amount         int64  `json:"amount"`
}

func (q *Queries) GetGroupStatusByGroupId(ctx context.Context, groupID int64) ([]GetGroupStatusByGroupIdRow, error) {
	rows, err := q.db.Query(ctx, getGroupStatusByGroupId, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupStatusByGroupIdRow
	for rows.Next() {
		var i GetGroupStatusByGroupIdRow
		if err := rows.Scan(
			&i.LendUserID,
			&i.LendUserName,
			&i.BorrowUserID,
			&i.BorrowUserName,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLendingsByUserId = `-- name: GetLendingsByUserId :many
SELECT borrow_user_id, sum(amount) as amount
FROM user_bills
WHERE lend_user_id = $1
AND is_active = True
GROUP BY borrow_user_id
`

type GetLendingsByUserIdRow struct {
	BorrowUserID int64 `json:"borrow_user_id"`
	Amount       int64 `json:"amount"`
}

func (q *Queries) GetLendingsByUserId(ctx context.Context, lendUserID int64) ([]GetLendingsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getLendingsByUserId, lendUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLendingsByUserIdRow
	for rows.Next() {
		var i GetLendingsByUserIdRow
		if err := rows.Scan(&i.BorrowUserID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const settleBillUserBillsByBillId = `-- name: SettleBillUserBillsByBillId :exec
WITH updated_user_bills as (
    UPDATE user_bills
    SET is_active = False
    WHERE user_bills.bill_id = $1
) 
UPDATE bills
SET is_active = False 
WHERE bills.bill_id = $1
`

func (q *Queries) SettleBillUserBillsByBillId(ctx context.Context, billID int64) error {
	_, err := q.db.Exec(ctx, settleBillUserBillsByBillId, billID)
	return err
}

const settleBillUserBillsByGroupId = `-- name: SettleBillUserBillsByGroupId :exec
WITH updated_user_bills as (
    UPDATE user_bills
    SET is_active = False
    WHERE user_bills.group_id = $1
)
UPDATE bills
SET is_active = False 
WHERE bills.group_id = $1
`

func (q *Queries) SettleBillUserBillsByGroupId(ctx context.Context, groupID int64) error {
	_, err := q.db.Exec(ctx, settleBillUserBillsByGroupId, groupID)
	return err
}

const settleUserBillsByBillId = `-- name: SettleUserBillsByBillId :exec
UPDATE user_bills
SET is_active = False
WHERE bill_id = $1
`

func (q *Queries) SettleUserBillsByBillId(ctx context.Context, billID int64) error {
	_, err := q.db.Exec(ctx, settleUserBillsByBillId, billID)
	return err
}

const settleUserBillsByGroupId = `-- name: SettleUserBillsByGroupId :exec
UPDATE user_bills
SET is_active = False
WHERE group_id = $1
`

func (q *Queries) SettleUserBillsByGroupId(ctx context.Context, groupID int64) error {
	_, err := q.db.Exec(ctx, settleUserBillsByGroupId, groupID)
	return err
}

const settleUserBillsByUserId = `-- name: SettleUserBillsByUserId :exec
UPDATE user_bills
SET is_active = False
WHERE (lend_user_id = $1
    AND borrow_user_id = $2)
    OR (lend_user_id = $2
    AND borrow_user_id = $1)
`

type SettleUserBillsByUserIdParams struct {
	LendUserID   int64 `json:"lend_user_id"`
	BorrowUserID int64 `json:"borrow_user_id"`
}

func (q *Queries) SettleUserBillsByUserId(ctx context.Context, arg SettleUserBillsByUserIdParams) error {
	_, err := q.db.Exec(ctx, settleUserBillsByUserId, arg.LendUserID, arg.BorrowUserID)
	return err
}
