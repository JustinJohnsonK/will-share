// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: bills.sql

package store

import (
	"context"
	"database/sql"
)

const addBill = `-- name: AddBill :one
INSERT INTO bills (bill_title, bill_description, group_id, amount)
VALUES (bill_title = $1, 
    bill_description = $2,
    group_id = $3,
    amount = $4)
RETURNING bill_description, bill_title, bill_id, group_id, amount, is_active, created_at, updated_at
`

type AddBillParams struct {
	BillTitle       sql.NullString `json:"bill_title"`
	BillDescription sql.NullString `json:"bill_description"`
	GroupID         int64          `json:"group_id"`
	Amount          int32          `json:"amount"`
}

func (q *Queries) AddBill(ctx context.Context, arg AddBillParams) (Bill, error) {
	row := q.db.QueryRow(ctx, addBill,
		arg.BillTitle,
		arg.BillDescription,
		arg.GroupID,
		arg.Amount,
	)
	var i Bill
	err := row.Scan(
		&i.BillDescription,
		&i.BillTitle,
		&i.BillID,
		&i.GroupID,
		&i.Amount,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBillByBillId = `-- name: DeleteBillByBillId :exec
UPDATE bills
SET is_active = False
WHERE bill_id = $1
`

func (q *Queries) DeleteBillByBillId(ctx context.Context, billID int64) error {
	_, err := q.db.Exec(ctx, deleteBillByBillId, billID)
	return err
}

const deleteBillsByGroupId = `-- name: DeleteBillsByGroupId :exec
UPDATE bills
SET is_active = False
WHERE group_id = $1
`

func (q *Queries) DeleteBillsByGroupId(ctx context.Context, groupID int64) error {
	_, err := q.db.Exec(ctx, deleteBillsByGroupId, groupID)
	return err
}

const getBillByBillId = `-- name: GetBillByBillId :one
SELECT bill_description, bill_title, bill_id, group_id, amount, is_active, created_at, updated_at
FROM bills
WHERE bill_id = $1
`

func (q *Queries) GetBillByBillId(ctx context.Context, billID int64) (Bill, error) {
	row := q.db.QueryRow(ctx, getBillByBillId, billID)
	var i Bill
	err := row.Scan(
		&i.BillDescription,
		&i.BillTitle,
		&i.BillID,
		&i.GroupID,
		&i.Amount,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
